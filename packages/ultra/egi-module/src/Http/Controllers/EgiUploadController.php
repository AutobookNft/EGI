<?php

/**
 * 📜 Oracode Controller: EgiUploadController
 * Handles backend POST requests for EGI file uploads.
 *
 * @package     Ultra\EgiModule\Http\Controllers
 * @author      Fabio Cherici <fabiocherici@gmail.com>
 * @copyright   2024 Fabio Cherici
 * @license     MIT
 * @version     1.1.0
 * @since       2025-04-19
 *
 * @purpose     🎯 Receives POST requests from the EGI upload interface, validates the request context,
 *              and delegates the core upload and EGI creation logic to the dedicated EgiUploadHandler.
 *
 * @context     🧩 Invoked by the web routing layer for POST requests to '/upload/egi'. Operates within
 *              the authenticated web context. Expects 'multipart/form-data' request containing the file.
 *
 * @state       💾 Stateless. Relies on the injected Request, EgiUploadHandler and ErrorManagerInterface.
 *
 * @feature     🗝️ Delegates processing to the specialized `EgiUploadHandler`.
 * @feature     🗝️ Returns the JsonResponse generated by the handler.
 * @feature     🗝️ Focused solely on handling EGI uploads for separation of concerns.
 * @feature     🗝️ Uses UltraErrorManager (UEM) through dependency injection for standardized error handling.
 *
 * @signal      🚦 Returns `Illuminate\Http\JsonResponse` (success or error) obtained from the handler.
 * @signal      🚦 Centralizes error handling through UEM rather than custom error responses.
 * @signal      🚦 Logs operations via injected UltraLogManager, removing direct Log facade usage.
 * @signal      🚦 May throw exceptions if request validation fails early or handler injection fails.
 *
 * @privacy     🛡️ Acts as a gateway; processing of file content and PII is delegated to `EgiUploadHandler`.
 * @privacy     🛡️ `@privacy-internal`: Handles the Request object, potentially containing file data and metadata.
 * @privacy     🛡️ `@privacy-lawfulBasis`: Necessary for performing the service (EGI upload) requested by the authenticated user (admin in Q1).
 * @privacy     🛡️ `@privacy-purpose`: Route the upload request to the correct handler.
 * @privacy     🛡️ `@privacy-data`: Passes the full Request object to the handler.
 * @privacy     🛡️ `@privacy-consideration`: Ensure appropriate authentication and authorization checks are in place (via middleware).
 *
 * @dependency  🤝 Laravel Framework (Request, Controller, JsonResponse).
 * @dependency  🤝 Ultra\ErrorManager\Interfaces\ErrorManagerInterface - For standardized error handling.
 * @dependency  🤝 Ultra\UltraLogManager\UltraLogManager - For standardized logging.
 * @dependency  🤝 Handler: `Ultra\EgiModule\Handlers\EgiUploadHandler`.
 * @dependency  🤝 Route: Definition in `routes/web.php` named 'egi.upload.store'.
 *
 * @testing     🧪 Feature Test: Simulate authenticated POST request with a valid file to '/upload/egi'. Mock `EgiUploadHandler` and `ErrorManagerInterface`. Assert handler method is called, assert response matches handler's mocked response.
 * @testing     🧪 Test cases: Invalid file, missing file, unauthenticated request.
 * @testing     🧪 Error handling: Mock ErrorManagerInterface to simulate error handling scenarios.
 *
 * @rationale   💡 Provides a dedicated controller for the EGI upload POST endpoint, ensuring clear routing and
 *              dependency injection of the correct handler, following standard Ultra/Oracode practices with
 *              centralized error handling via UEM and standardized logging via ULM.
 *
 * @changelog   1.1.0 - 2025-04-29: Integrated UltraErrorManager via dependency injection for standardized error handling.
 *                                   Replaced direct Log facade usage with injected UltraLogManager.
 *                                   Updated documentation to reflect new dependencies and error handling approach.
 */

namespace Ultra\EgiModule\Http\Controllers;

use Ultra\EgiModule\Handlers\EgiUploadHandler;
use Ultra\ErrorManager\Interfaces\ErrorManagerInterface;
use Ultra\UltraLogManager\UltraLogManager;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Contracts\Auth\Factory as AuthFactory;
use App\Http\Controllers\Controller;
use Throwable;

class EgiUploadController extends Controller
{
    /**
     * 🧱 @dependency ErrorManagerInterface instance.
     * Used for standardized error handling.
     * @var ErrorManagerInterface
     */
    protected readonly ErrorManagerInterface $errorManager;

    /**
     * 🧱 @dependency UltraLogManager instance.
     * Used for standardized logging.
     * @var UltraLogManager
     */
    protected readonly UltraLogManager $logger;

    /**
     * 🧱 @dependency AuthFactory instance.
     * Used for user authentication status.
     * @var AuthFactory
     */
    protected readonly AuthFactory $auth;

    /**
     * 🎯 Constructor: Injects required dependencies.
     *
     * @param ErrorManagerInterface $errorManager Ultra Error Manager interface for standardized error handling
     * @param UltraLogManager $logger Ultra Log Manager for standardized logging
     * @param AuthFactory $auth Laravel Auth Factory for user authentication
     */
    public function __construct(
        ErrorManagerInterface $errorManager,
        UltraLogManager $logger,
        AuthFactory $auth
    ) {
        $this->errorManager = $errorManager;
        $this->logger = $logger;
        $this->auth = $auth;
    }

    /**
     * 🚀 Handle the incoming POST request for EGI file upload.
     * @purpose Process the EGI file upload by delegating to the EgiUploadHandler.
     * @usage Mapped via route: POST /upload/egi (named 'egi.upload.store')
     *
     * --- Logic ---
     * 1. Log the incoming request attempt through injected UltraLogManager.
     * 2. Inject the EgiUploadHandler dependency.
     * 3. Try to call the handler's primary processing method (e.g., `handleEgiUpload`).
     * 4. If successful, return the JsonResponse generated by the handler.
     * 5. If exception is thrown, use the injected ErrorManagerInterface to handle it.
     * --- End Logic ---
     *
     * @param Request $request The incoming HTTP request containing the uploaded file and potential metadata.
     * @param EgiUploadHandler $handler The specific handler for EGI uploads, injected by Laravel's service container.
     * @return JsonResponse|RedirectResponse The response from successful handler execution or error handler.
     *
     * @privacy-purpose To receive the uploaded file data and pass it securely to the designated handler for processing according to EGI business rules.
     * @privacy-data Handles the Request object. Delegates PII processing to the handler.
     * @privacy-lawfulBasis Necessary for providing the EGI upload service.
     */
    public function handleUpload(Request $request, EgiUploadHandler $handler): JsonResponse|RedirectResponse
    {
        // Prepare context with user ID from injected AuthFactory
        $logContext = [
            'controller' => static::class,
            'method' => __FUNCTION__,
            'user_id' => $this->auth->guard()->id()
        ];

        // Log using injected UltraLogManager
        $this->logger->info('[EgiUploadController] Received EGI upload request.', $logContext);

        try {
            // Delegate to the injected EgiUploadHandler
            return $handler->handleEgiUpload($request);

        } catch (Throwable $e) {
            // Prepare error context with relevant details
            $errorContext = array_merge($logContext, [
                'exception_class' => get_class($e),
                'request_url' => $request->fullUrl(),
                'request_method' => $request->method(),
                // Add sanitized file information if present
                'has_file' => $request->hasFile('egi_file'),
                'file_size' => $request->hasFile('egi_file') ? $request->file('egi_file')->getSize() : null,
                'file_mime' => $request->hasFile('egi_file') ? $request->file('egi_file')->getMimeType() : null,
            ]);

            // Log the error using injected UltraLogManager
            $this->logger->error('[EgiUploadController] Error processing EGI upload.', $errorContext);

            // Determine appropriate error code based on exception type
            $errorCode = $this->determineErrorCode($e);

            // Use injected ErrorManagerInterface to handle the error
            // This will return an appropriate response based on context (JSON/redirect)
            return $this->errorManager->handle($errorCode, $errorContext, $e);
        }
    }

    /**
     * 🧱 Determine the appropriate UEM error code based on exception type.
     * Maps common exception types to specific UEM error codes.
     *
     * @param Throwable $e The caught exception
     * @return string The appropriate UEM error code
     */
    protected function determineErrorCode(Throwable $e): string
    {
        // Map common exception types to specific UEM error codes
        // These should align with error codes defined in UEM config
        return match (true) {
            $e instanceof \Illuminate\Validation\ValidationException => 'VALIDATION_ERROR',
            $e instanceof \Illuminate\Http\Exceptions\HttpResponseException => 'HTTP_RESPONSE_ERROR',
            $e instanceof \Illuminate\Auth\AuthenticationException => 'AUTHENTICATION_ERROR',
            $e instanceof \Illuminate\Auth\Access\AuthorizationException => 'AUTHORIZATION_ERROR',
            $e instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException => 'ROUTE_NOT_FOUND',
            $e instanceof \Illuminate\Database\Eloquent\ModelNotFoundException => 'RECORD_NOT_FOUND',
            $e instanceof \Illuminate\Database\QueryException => 'DATABASE_ERROR',
            // EGI-specific error types (example - would need to be defined in UEM config)
            $e instanceof \Ultra\EgiModule\Exceptions\EgiValidationException => 'INVALID_EGI_FILE',
            $e instanceof \Ultra\EgiModule\Exceptions\EgiStorageException => 'ERROR_DURING_FILE_UPLOAD',
            $e instanceof \Ultra\EgiModule\Exceptions\EgiProcessingException => 'ERROR_DURING_EGI_PROCESSING',
            // Default catch-all
            default => 'ERROR_DURING_FILE_UPLOAD', // Generic upload error code
        };
    }
}
