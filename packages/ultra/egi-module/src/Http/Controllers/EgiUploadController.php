<?php

// Namespace corretto per il modulo EGI
namespace Ultra\EgiModule\Controllers;

// Laravel & PHP Dependencies
use Illuminate\Foundation\Auth\Access\AuthorizesRequests; // Standard traits per controller
use Illuminate\Foundation\Validation\ValidatesRequests; // Standard traits per controller
use Illuminate\Routing\Controller as BaseController; // Estende il BaseController di Laravel
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log; // Standard Log Facade
use Illuminate\Support\Str; // Standard Str Facade

// Handler Specifico (dal pacchetto UUM, dove risiede ora)

use Ultra\UploadManager\Handlers\EgiUploadHandler; // Inietta l'handler corretto
use Throwable;

/**
 * 📜 Oracode Controller: EgiUploadController
 * Handles incoming HTTP requests for EGI image uploads.
 *
 * @package     Ultra\EgiModule\Controllers
 * @version     1.0.0
 * @author      Padmin D. Curtis (Implementation)
 * @copyright   2024 Fabio Cherici
 * @license     MIT // Or your package license
 *
 * @purpose     Acts as the entry point for the EGI upload functionality via HTTP.
 *              Its primary responsibility is to receive the request, perform minimal
 *              initial validation (delegating detailed validation to the handler),
 *              instantiate and invoke the dedicated EgiUploadHandler, and return
 *              the JSON response generated by the handler. It bridges the web/api
 *              layer with the core EGI upload business logic encapsulated in the handler.
 *
 * @context     Instantiated by Laravel's routing system when a request hits the
 *              associated route (e.g., POST /upload/egi). Operates within the
 *              EGI Module context but is part of the application's request lifecycle.
 *              Relies on Laravel's Service Container for Dependency Injection of the EgiUploadHandler.
 *
 * @state       Typically stateless between requests. Manages the state of a single
 *              incoming upload request during its execution.
 *
 * @feature     - Handles POST requests for EGI uploads.
 * @feature     - Injects and utilizes the `EgiUploadHandler`.
 * @feature     - Returns structured `JsonResponse` from the handler.
 * @feature     - Basic request validation (presence of file).
 * @feature     - Minimal logic, delegating core work to the handler (Separation of Concerns).
 *
 * @signal      Returns `Illuminate\Http\JsonResponse` (forwarded from the handler).
 * @signal      Logs basic request handling information and unexpected errors via `Log`.
 *
 * @privacy     Handles the incoming `Request` object which contains user data (if authenticated),
 *              IP address, user agent, and the uploaded file data. Passes this information
 *              to the handler, which has its own privacy considerations.
 *
 * @dependency  Laravel Framework (Request, JsonResponse, Log, Controller traits).
 * @dependency  `Ultra\UploadManager\Handlers\EgiUploadHandler`.
 *
 * @testing     Requires Feature tests (HTTP tests) simulating POST requests to the
 *              associated route with valid and invalid file uploads. Mock the
 *              `EgiUploadHandler` to test the controller in isolation, verifying
 *              it calls the handler correctly and returns its response. Test
 *              authentication/authorization middleware if applied to the route.
 *
 * @rationale   Provides a clean separation between the HTTP request/response layer
 *              and the business logic contained within the `EgiUploadHandler`, following
 *              standard MVC/Controller patterns.
 */
class EgiUploadController extends BaseController
{
    use AuthorizesRequests, ValidatesRequests; // Standard Laravel controller traits

    /**
     * The log channel for this controller.
     * @var string
     */
    protected string $logChannel = 'upload'; // Or 'egi_upload'

    /**
     * The injected EGI Upload Handler instance.
     * @var EgiUploadHandler
     */
    protected EgiUploadHandler $egiUploadHandler;

    /**
     * 🎯 Constructor: Injects the EgiUploadHandler dependency.
     *
     * @param EgiUploadHandler $egiUploadHandler Instance resolved by Laravel's service container.
     */
    public function __construct(EgiUploadHandler $egiUploadHandler)
    {
        $this->egiUploadHandler = $egiUploadHandler;
        Log::channel($this->logChannel)->debug('[EgiUploadController] Initialized with EgiUploadHandler.');
    }

    /**
     * 🎯 Handles the incoming request to store a new EGI image.
     * Validates basic request structure and delegates processing to the handler.
     *
     * @param Request $request The incoming HTTP request.
     * @return JsonResponse The JSON response generated by the handler.
     */
    public function store(Request $request): JsonResponse
    {
        $logContext = [
            'controller' => static::class,
            'method' => 'store',
            'request_id' => Str::uuid()->toString(), // Unique ID for tracing this request
            'user_id' => Auth::id() ?? 'guest',
            'ip_address' => $request->ip(),
        ];
        Log::channel($this->logChannel)->info('[EgiUploadController] Received EGI upload request.', $logContext);

        // Optional: Minimal validation at controller level (e.g., check if file exists)
        // More detailed validation is handled within EgiUploadHandler->validateFile()
        if (!$request->hasFile('file')) {
            Log::channel($this->logChannel)->warning('[EgiUploadController] Request is missing the "file" input.', $logContext);
            return response()->json([
                'userMessage' => trans('uploadmanager::uploadmanager.js.no_file_specified') ?: 'No file specified in the request.',
                'error_code' => 'MISSING_FILE_INPUT',
            ], 400); // Bad Request
        }
        if (!$request->file('file')->isValid()) {
             Log::channel($this->logChannel)->warning('[EgiUploadController] Received invalid file upload.', array_merge($logContext, ['upload_error' => $request->file('file')->getError()]));
             return response()->json([
                 'userMessage' => trans('uploadmanager::uploadmanager.js.invalid_upload') ?: 'Invalid file upload.', // Add translation key
                 'error_code' => 'INVALID_FILE_UPLOAD',
                 'details' => 'Upload error code: ' . $request->file('file')->getError(),
             ], 400); // Bad Request
        }

        try {
            // Delegate the entire handling process to the injected handler
            $response = $this->egiUploadHandler->handleEgiUpload($request);

            Log::channel($this->logChannel)->info(
                '[EgiUploadController] Request processed by handler.',
                array_merge($logContext, ['response_status' => $response->getStatusCode()])
            );

            return $response;

        } catch (Throwable $e) {
            // Catch unexpected errors *during handler invocation* or setup
            // Note: The handler itself catches its internal errors and returns JsonResponse
            Log::channel($this->logChannel)->error('[EgiUploadController] Unexpected error during handler execution.', array_merge($logContext, [
                'exception_class' => get_class($e),
                'exception_message' => $e->getMessage(),
                'exception_file' => $e->getFile(),
                'exception_line' => $e->getLine(),
            ]));

            // Return a generic server error response
            return response()->json([
                'userMessage' => trans('uploadmanager::uploadmanager.js.server_error') ?: 'An unexpected server error occurred.',
                'error_code' => 'CONTROLLER_EXCEPTION',
                'error_details' => app()->environment('production') ? null : $e->getMessage(), // Hide details in production
            ], 500);
        }
    }
}
