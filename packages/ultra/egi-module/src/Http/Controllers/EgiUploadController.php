<?php

/**
 * 📜 Oracode Controller: EgiUploadController
 * Handles backend POST requests for EGI file uploads.
 *
 * @package     App\Http\Controllers
 * @author      Fabio Cherici <fabiocherici@gmail.com>
 * @copyright   2024 Fabio Cherici
 * @license     MIT
 * @version     1.0.0
 * @since       2025-04-19
 *
 * @purpose     🎯 Receives POST requests from the EGI upload interface, validates the request context,
 *              and delegates the core upload and EGI creation logic to the dedicated EgiUploadHandler.
 *
 * @context     🧩 Invoked by the web routing layer for POST requests to '/upload/egi'. Operates within
 *              the authenticated web context. Expects 'multipart/form-data' request containing the file.
 *
 * @state       💾 Stateless. Relies on the injected Request and EgiUploadHandler.
 *
 * @feature     🗝️ Delegates processing to the specialized `EgiUploadHandler`.
 * @feature     🗝️ Returns the JsonResponse generated by the handler.
 * @feature     🗝️ Focused solely on handling EGI uploads for separation of concerns.
 *
 * @signal      🚦 Returns `Illuminate\Http\JsonResponse` (success or error) obtained from the handler.
 * @signal      🚦 Logs basic request handling via standard `Log` facade.
 * @signal      🚦 May throw exceptions if request validation fails early or handler injection fails.
 *
 * @privacy     🛡️ Acts as a gateway; processing of file content and PII is delegated to `EgiUploadHandler`.
 * @privacy     🛡️ `@privacy-internal`: Handles the Request object, potentially containing file data and metadata.
 * @privacy     🛡️ `@privacy-lawfulBasis`: Necessary for performing the service (EGI upload) requested by the authenticated user (admin in Q1).
 * @privacy     🛡️ `@privacy-purpose`: Route the upload request to the correct handler.
 * @privacy     🛡️ `@privacy-data`: Passes the full Request object to the handler.
 * @privacy     🛡️ `@privacy-consideration`: Ensure appropriate authentication and authorization checks are in place (via middleware).
 *
 * @dependency  🤝 Laravel Framework (Request, Controller, JsonResponse, Log).
 * @dependency  🤝 Handler: `App\Handlers\EgiUploadHandler`.
 * @dependency  🤝 Route: Definition in `routes/web.php` named 'egi.upload.store'.
 *
 * @testing     🧪 Feature Test: Simulate authenticated POST request with a valid file to '/upload/egi'. Mock `EgiUploadHandler`. Assert handler method is called, assert response matches handler's mocked response.
 * @testing     🧪 Test cases: Invalid file, missing file, unauthenticated request.
 *
 * @rationale   💡 Provides a dedicated controller for the EGI upload POST endpoint, ensuring clear routing and
 *              dependency injection of the correct handler, following standard Laravel practices.
 */

namespace Ultra\EgiModule\Http\Controllers;

use Ultra\EgiModule\Handlers\EgiUploadHandler; // Importa il tuo handler EGI specifico
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Throwable;

class EgiUploadController extends Controller
{

    /**
    * Log channel for this handler.
    * @var string
    */
    protected string $logChannel = 'upload'; // Default channel

    /**
     * 🚀 Handle the incoming POST request for EGI file upload.
     * @purpose Process the EGI file upload by delegating to the EgiUploadHandler.
     * @usage Mapped via route: POST /upload/egi (named 'egi.upload.store')
     *
     * --- Logic ---
     * 1. Log the incoming request attempt.
     * 2. Inject the EgiUploadHandler dependency.
     * 3. Call the handler's primary processing method (e.g., `handleEgiUpload`).
     * 4. Return the JsonResponse generated by the handler.
     * 5. Include a basic try-catch for unexpected errors during handler invocation.
     * --- End Logic ---
     *
     * @param Request $request The incoming HTTP request containing the uploaded file and potential metadata.
     * @param EgiUploadHandler $handler The specific handler for EGI uploads, injected by Laravel's service container.
     * @return JsonResponse The JSON response generated by the EgiUploadHandler.
     *
     * @throws Throwable Can re-throw exceptions from the handler or framework.
     *
     * @privacy-purpose To receive the uploaded file data and pass it securely to the designated handler for processing according to EGI business rules.
     * @privacy-data Handles the Request object. Delegates PII processing to the handler.
     * @privacy-lawfulBasis Necessary for providing the EGI upload service.
     */
    public function handleUpload(Request $request, EgiUploadHandler $handler): JsonResponse
    {
        $logContext = ['controller' => static::class, 'method' => __FUNCTION__, 'user_id' => Auth::id()];
        Log::channel($this->logChannel)->info('[EgiUploadController] Received EGI upload request.', $logContext);

        try {
            // Chiama il metodo principale del tuo EgiUploadHandler, passandogli la request.
            // L'handler si occuperà di tutto il resto (validazione, DB, storage, response).
            return $handler->handleEgiUpload($request);

        } catch (Throwable $e) {
            // Catch generico per errori imprevisti *prima* che l'handler possa gestire l'errore
            // (es. problemi di dependency injection, errori fatali nel costruttore dell'handler)
            Log::channel($this->logChannel)->critical('[EgiUploadController] Critical error invoking EgiUploadHandler.', array_merge($logContext, [
                'exception_class' => get_class($e),
                'exception_message' => $e->getMessage(),
                'exception_file' => $e->getFile(),
                'exception_line' => $e->getLine(),
            ]));

            // Restituisce un errore 500 generico
            return response()->json([
                'userMessage' => trans('uploadmanager::errors.generic_upload_error') ?: 'A critical server error occurred.',
                'error_details' => 'Server error processing the request.' // Non esporre dettagli qui
            ], 500);
        }
    }
}
